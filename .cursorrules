# Requirements-  !!! Important!!!

- Before doing anything, you should categorize the task into one of the following and follow the instructions accordingly:
	- Fixing Errors (refer: Error fixing section)
	- Execute a script (refer: Direction to execute the scripts section)
	- Adding a new feature/component (refer: 'Prefered Code Structure' section)
	- Answer a question (refer: refer all sections)
	- General (refer: refer all sections)
	- All others (refer: refer all sections)


## Direction to execute the scripts:
- Run from path: "C:\Users\StdUser\Desktop\MyProjects\Backtesting\MT5\StrategyTester\streamlit"
- You may already be in this path. If not, navigate to this path.
- You must wait for script output before proceeding
- If no output is visible, wait for 15 more seconds and check again.


# Project details

## trading_data.db 
- path = "C:\Users\StdUser\Desktop\MyProjects\Backtesting\MT5\StrategyTester\streamlit\logs\trading_data.db"
- This is the main database to get the data to do the predictions, store the predictions, store model information, store prediction metrics, etc.
- Store the predictions in 'historical_predictions' table
- Store the prediction metrics in 'historical_prediction_metrics' table
- Store the model information in 'model_repository' table

## mlflow.db 
- path = "C:\Users\StdUser\Desktop\MyProjects\Backtesting\MT5\StrategyTester\streamlit\mlflow.db".
- This is the database to integrate with MLflow.
- Use 'trading_models' experiment to store the model information, prediction metrics, etc. In other words, use this experiment when training the model.
- Use 'model_predictions' experiment to store the prediction runs. In other words, use this experiment when predicting the data.

## Naming conventions
- run_id : Unique id for each prediction run. 'run_name' in MLflow is same as 'run_id' when predicting the data.
Naming convention:    run_{current_time}
	where 
    - current_time is formatted as: YYYYMMDD_HHMMSS_fff
	- YYYY: Year (4 digits)
	- MM: Month (2 digits)
	- DD: Day (2 digits)
	- HH: Hour (2 digits)
	- MM: Minutes (2 digits)
	- SS: Seconds (2 digits)
	- fff: First 3 digits of microseconds
	For example, a run_id might look like: run_20250215_110148_123
	
- model_name : name of the model. 'run_name' in MLflow is same as 'model_name' when training the model.
Naming convention: {model_type}_{training_type}_{timestamp}
	where:
	- model_type: Type of the model (e.g., 'xgboost', 'decision_tree', 'random_forest', 'lstm')
	- training_type: One of four types:
		- 'single': For models trained on a single table
		- 'multi': For models trained on multiple tables simultaneously
		- 'base': For the initial model in incremental training
		- 'incremental': For models updated incrementally
	- timestamp: Format is YYYYMMDD_HHMMSS
		- YYYY: Year (4 digits)
		- MM: Month (2 digits)
		- DD: Day (2 digits)
		- HH: Hour (2 digits)
		- MM: Minutes (2 digits)
		- SS: Seconds (2 digits)
	Examples:
	- lstm_single_20250215_110148
	- xgboost_multi_20250215_110148


## Use the re-usable scripts to get the required information to execute your tasks.
- get_table_schema.py : to get the schema of the table
	Basic syntax: python get_table_schema.py <database_path> <table_name>
	Example: python get_table_schema.py "logs\trading_data.db" "model_repository"
- get_sample_data.py : to get the sample data from the table or to check the data in the table
	Basic syntax: python get_sample_data.py <database_path> <table_name> [options]
	Available options:
		--columns: Comma-separated list of columns to retrieve
		--limit: Number of rows to retrieve (default: 5)
		--order-by: Column to order by (with optional ASC/DESC)
		--where: WHERE clause for filtering data
		--random: Get random samples instead of first N rows
	Examples:
		1. python get_sample_data.py "logs\trading_data.db" "historical_predictions" --order-by "datetime DESC" --limit 3
		2. python get_sample_data.py "logs\trading_data.db" "historical_predictions" --where "model_name LIKE 'lstm%'" --random --limit 5
		3. python get_sample_data.py "logs\trading_data.db" "historical_predictions" --columns "datetime,actual_price,predicted_price,error" --where "error < 0.05" --limit 5


##  Frequent mistakes you do and you should keep in mind to avoid these.
1. I am using PowerShell in Windows machine. You have to wait for some time after executing the Powershell commands to view the terminal output. You are frequently moving on without waiting for the output.
2. When I ask you to replicate the code/layout, you should replicate the code but use different identifiers so that there is no conflict with the existing code.
3. Make sure to use the different unique identifiers for the components in the UI.
4. DON'T try to use multiple commands in the same line.
5. If you must,since I am using Powershell, using '&&' is not working. So, use ';' to run multiple commands in the same line.


## Prefered Code Structure
1. Core component (file to have all core logic)
2. CLI interface (to handle core component via argparse)
3. Streamlit UI interface ( page to handle core component similar to cli, but in a more user friendly)


# Error fixing
- Consider multiple possible causes before deciding on the solution. Do not jump to conclusions.
- Explain the problem and the solution in a way that is easy to understand.
- Always verify the fix.
- Consider the context of the code.
- If your previous attempt to fix a code didn't work, try to understand the reason and discuss with yourself, and try to fix it again systematically.


# Instructions/Rules to follow
1. You need to execute the scripts ONLY from this path "C:\Users\StdUser\Desktop\MyProjects\Backtesting\MT5\StrategyTester\streamlit"
2. Before making changes, go through the entire file and understand if there are any other changes have to be done for the same issue as this will reduce multiple iterations. 
3. If you are stuck on an issue, try to include more logging to understand where and why the error is coming. Only after understanding the issue, try to fix it.
4. If you have gone through multiple iterations and still stuck on the same issue.
    - you should think OUT OF THE BOX and try to solve the issue. 
    - Revisit the old issues we faced and DON'T repeat it again.
    - Go through the entire code and revisit the plan and with the context, try to tackle it.
5. If you need clarification, ask the user. DON'T ASSUME!
6. Always try to reuse the existing code. Create only if that is not possible.
7. Always work on the basis of what is observed in the logs and actual data. 

# General Guidelines
- Write clean, readable, and well-structured code.
- Reliability is the top priority- If you can't be sure that the code will work, don't build it.
- Implement features in the simplest way possible.
- Think thoroughly about the code before writing it.
- Plan the next steps in detail





